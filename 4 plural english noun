class FiniteStateMachine:
    def _init_(self):
        self.states = ['START', 'ADD_S', 'ADD_ES', 'CHANGE_Y_TO_IES', 'FINAL']
        self.current_state = 'START'
        
    def transition(self, word):
        """
        Transitions between states based on the last characters of the word.
        """
        if word.endswith(('s', 'x', 'z', 'ch', 'sh')):
            self.current_state = 'ADD_ES'
        elif word.endswith('y') and word[-2] not in 'aeiou':
            self.current_state = 'CHANGE_Y_TO_IES'
        else:
            self.current_state = 'ADD_S'
    
    def pluralize(self, word):
        """
        Generates the plural form of a given English noun using FSM.
        """
        self.transition(word)
        if self.current_state == 'ADD_S':
            plural = word + 's'
        elif self.current_state == 'ADD_ES':
            plural = word + 'es'
        elif self.current_state == 'CHANGE_Y_TO_IES':
            plural = word[:-1] + 'ies'
        else:
            plural = word  # Default case (shouldn't reach here in this FSM)
        
        # Move to the final state after processing
        self.current_state = 'FINAL'
        return plural

# Test the FSM for morphological parsing
fsm = FiniteStateMachine()
nouns = ['dog', 'bus', 'box', 'baby', 'church', 'cat', 'boy']

print("Plural Forms:")
for noun in nouns:
    plural_form = fsm.pluralize(noun)
    print(f"{noun} -> {plural_form}")
